// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// update_loadings
Rcpp::NumericMatrix update_loadings(int n, int p_m, int Ktot, const arma::mat& X_m, const arma::mat& facTfac, const arma::mat& fac, const arma::vec& mu_m, const arma::vec& s2_inv_m, const arma::vec& prec_m);
RcppExport SEXP _jafar_update_loadings(SEXP nSEXP, SEXP p_mSEXP, SEXP KtotSEXP, SEXP X_mSEXP, SEXP facTfacSEXP, SEXP facSEXP, SEXP mu_mSEXP, SEXP s2_inv_mSEXP, SEXP prec_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p_m(p_mSEXP);
    Rcpp::traits::input_parameter< int >::type Ktot(KtotSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_m(X_mSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type facTfac(facTfacSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type fac(facSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_m(mu_mSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s2_inv_m(s2_inv_mSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type prec_m(prec_mSEXP);
    rcpp_result_gen = Rcpp::wrap(update_loadings(n, p_m, Ktot, X_m, facTfac, fac, mu_m, s2_inv_m, prec_m));
    return rcpp_result_gen;
END_RCPP
}
// update_loadings_parallel
Rcpp::NumericMatrix update_loadings_parallel(int n, int p_m, int Ktot, const arma::mat& X_m, const arma::mat& facTfac, const arma::mat& fac, const arma::vec& mu_m, const arma::vec& s2_inv_m, const arma::vec& prec_m);
RcppExport SEXP _jafar_update_loadings_parallel(SEXP nSEXP, SEXP p_mSEXP, SEXP KtotSEXP, SEXP X_mSEXP, SEXP facTfacSEXP, SEXP facSEXP, SEXP mu_mSEXP, SEXP s2_inv_mSEXP, SEXP prec_mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type p_m(p_mSEXP);
    Rcpp::traits::input_parameter< int >::type Ktot(KtotSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X_m(X_mSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type facTfac(facTfacSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type fac(facSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu_m(mu_mSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s2_inv_m(s2_inv_mSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type prec_m(prec_mSEXP);
    rcpp_result_gen = Rcpp::wrap(update_loadings_parallel(n, p_m, Ktot, X_m, facTfac, fac, mu_m, s2_inv_m, prec_m));
    return rcpp_result_gen;
END_RCPP
}
// msf
Rcpp::NumericMatrix msf(arma::mat lambda, arma::mat pivot);
RcppExport SEXP _jafar_msf(SEXP lambdaSEXP, SEXP pivotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pivot(pivotSEXP);
    rcpp_result_gen = Rcpp::wrap(msf(lambda, pivot));
    return rcpp_result_gen;
END_RCPP
}
// msfOUT
Rcpp::NumericVector msfOUT(arma::mat lambda, arma::mat pivot);
RcppExport SEXP _jafar_msfOUT(SEXP lambdaSEXP, SEXP pivotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pivot(pivotSEXP);
    rcpp_result_gen = Rcpp::wrap(msfOUT(lambda, pivot));
    return rcpp_result_gen;
END_RCPP
}
// aplr
Rcpp::NumericMatrix aplr(arma::mat matr, arma::vec perm);
RcppExport SEXP _jafar_aplr(SEXP matrSEXP, SEXP permSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type matr(matrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type perm(permSEXP);
    rcpp_result_gen = Rcpp::wrap(aplr(matr, perm));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_jafar_update_loadings", (DL_FUNC) &_jafar_update_loadings, 9},
    {"_jafar_update_loadings_parallel", (DL_FUNC) &_jafar_update_loadings_parallel, 9},
    {"_jafar_msf", (DL_FUNC) &_jafar_msf, 2},
    {"_jafar_msfOUT", (DL_FUNC) &_jafar_msfOUT, 2},
    {"_jafar_aplr", (DL_FUNC) &_jafar_aplr, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_jafar(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
