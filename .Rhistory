theme_void() +
theme(panel.background = element_rect(colour = "gray", fill = "gray", linewidth = 0.5))
matPlot <- matPlot + theme(legend.position = "none") +
labs(title = latex2exp::TeX(texLabel)) +
theme(plot.title = element_text(size = 10,hjust = 0.5))
return(matPlot)
}
#'
#' @importFrom ggplot2 ggplot aes geom_line theme
#'
colorBar_strip <- function(clim = c(-1, 1), texLabel = NULL) {
if (is.null(texLabel)) texLabel <- "$\\Sigma$"
ncolors <- 512
z <- seq(clim[1], clim[2], length.out = ncolors)
df <- data.frame(x = z, y = 1, z = z)
blim = floor(clim[2] / 0.05) * 0.05
breaks <- round(seq(-blim, blim, length.out = 5),2)
stripPlot <- ggplot(df, aes(x, y, fill = z)) +
geom_raster() +
scale_fill_gradient2(limits = clim, low = "#AA4499", mid = "white", high = "#117733",
oob = scales::squish) +
scale_x_continuous(breaks = breaks) +
# coord_fixed(ratio = 1/15) +
theme_minimal(base_size = 12) +
theme(
axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank(),
axis.title.x = element_blank(),
panel.grid   = element_blank(),
legend.position = "none",
axis.text.x  = element_text(size = 9)
) +
labs(title = latex2exp::TeX(texLabel)) +
theme(plot.title = element_text(size = 10,hjust = 0.5))
return(stripPlot)
}
#'
#' @importFrom ggplot2 ggplot aes geom_line theme
#'
white_spacer <- function() {
white_plot <- ggplot() + theme_void() +
theme(panel.background = element_rect(fill = "white", colour = NA))
return(white_plot)
}
#' Plot posterior means of factor loadings
#'
#' @param risMCMC Posterior samples, output of \code{gibbs_jafar} or \code{gibbs_jfr}
#' @param out_path Output path where the generated plot will be saved
#' @param out_name_shared Output file name for the shared component plot (default: "n_factors_shared")
#' @param out_name_specific Output file name for the specific components plot (default: "n_factor_specific")
#'
#'
#' @importFrom ggplot2 ggplot aes geom_line theme cowplot
#'
#' @export
#'
plot_loadings <- function(risMCMC,out_path='~/Desktop/',
out_name_shared='shared_loadings',
out_name_specific='specific_loadings'){
is_supervised = ('Theta'%in%names(risMCMC))
is_jafar = grepl('jafar',risMCMC$hyper_param$model)
M <- length(risMCMC$mu_m)
p_m <- sapply(risMCMC$Lambda_m, ncol)
# Compute posterior means
L_mean_m <- lapply(risMCMC$Lambda_m, function(mat) apply(mat,c(2,3),mean))
if(is_jafar){G_mean_m <- lapply(risMCMC$Gamma_m, function(mat) apply(mat,c(2,3),mean))}
if(is_supervised){
T_mean = apply(risMCMC$Theta,2,mean)
if(is_jafar){T_mean_m <- lapply(risMCMC$Theta_m, function(mat) apply(mat,2,mean))}
}
# Get limits
K0 = ncol(L_mean_m[[1]])
if(is_jafar){K0_m = sapply(G_mean_m,ncol)}
lim_load = c(-1,1)*max(1,ceiling(100*max(abs(unlist(c(L_mean_m))))+1)/100)
if(is_supervised){lim_th = c(-1,1)*ceiling(100*max(abs(c(T_mean)))+1)/100}
if(is_jafar){
lim_load = c(-1,1)*max(1,ceiling(100*max(abs(unlist(c(L_mean_m,G_mean_m))))+1)/100)
if(is_supervised){lim_th = c(-1,1)*ceiling(100*max(abs(c(T_mean,unlist(T_mean_m))))+1)/100}
}
# Re-order columns
idx_shared = order(rowMeans(sapply(L_mean_m, function(mat) colMeans(mat^2))),decreasing = T)
idx_shared_m <- list()
for(m in 1:M){
L_mean_m[[m]] = L_mean_m[[m]][,idx_shared]
if(is_jafar){
idx_shared_m[[m]] <- order(colMeans(G_mean_m[[m]]^2),decreasing = T)
G_mean_m[[m]] = G_mean_m[[m]][,idx_shared_m[[m]]]
}
}
if(is_supervised){
T_mean = T_mean[idx_shared]
if(is_jafar){for(m in 1:M){T_mean_m[[m]] = T_mean_m[[m]][idx_shared_m[[m]]]}}
}
# plotting parameters
Nrow <- 2
rel_heights = c(12.5, 2)
tot_height = 5
tot_width = 2*M
if(is_supervised){
Nrow <- 3
rel_heights = c(2, 13, 2)
tot_height = 6
}
# plot shared component
pL <- lapply(1:M, function(m) visualizeMatrix(t(L_mean_m[[m]]),
texLabel = paste0("$\\Lambda_", m, "$"), clim = lim_load) +
theme(plot.margin = margin(3, 5, 3, 5)))
p0 <- replicate(M, white_spacer(), simplify = FALSE)
p0[[M]] <- gg_gradient_strip(clim = lim_load, texLabel = paste0("$\\Lambda_m$"))
all_plots <- c(pL,p0)
if(is_supervised){
p0[[1]] <- gg_gradient_strip(clim = lim_th, texLabel = paste0("$\\theta$"))
pT <- visualizeMatrix(matrix(T_mean,ncol=1),
texLabel = paste0("$\\theta$"), clim = lim_th) +
theme(plot.margin = margin(0, 5, 0, 5))
pT0 <- replicate(M, white_spacer(), simplify = FALSE)
pT0[[(M+1)%/%2]] <- pT
all_plots <- c(pT0,pL,p0)
}
combined_plots <- plot_grid(plotlist=all_plots,nrow=Nrow,ncol=M,align="hv",rel_heights=rel_heights)
ggsave(file.path(out_path, paste0(out_name_shared,".pdf")),
combined_plots, width = tot_width, height = tot_height)
# plot specific components
if(is_jafar){
pG <- lapply(1:M, function(m) visualizeMatrix(t(L_mean_m[[m]]),
texLabel = paste0("$\\Gamma_", m, "$"), clim = lim_load) +
theme(plot.margin = margin(3, 5, 3, 5)))
p0 <- replicate(M, white_spacer(), simplify = FALSE)
p0[[M]] <- gg_gradient_strip(clim = lim_load, texLabel = paste0("$\\Gamma_m$"))
all_plots <- c(pG,p0)
if(is_supervised){
p0[[1]] <- gg_gradient_strip(clim = lim_th, texLabel = paste0("$\\theta_m$"))
pT <- lapply(1:M, function(m) visualizeMatrix(matrix(T_mean_m[[m]],ncol=1),
texLabel = paste0("$\\theta_", m,"$"), clim = lim_th) +
theme(plot.margin = margin(0, 5, 0, 5)))
pT0 <- replicate(M, white_spacer(), simplify = FALSE)
pT0[[(M+1)%/%2]] <- pT
all_plots <- c(pT0,pG,p0)
}
combined_plots <- plot_grid(plotlist=all_plots,nrow=Nrow,ncol=M,align="hv",rel_heights=rel_heights)
ggsave(file.path(out_path, paste0(out_name_specific,".pdf")),
combined_plots, width = tot_width, height = tot_height)
}
}
# prova -------
plot_loadings(mcmc_supervised)
#'
#' @importFrom ggplot2 ggplot aes geom_line theme cowplot
#'
visualizeMatrix <- function(Sigma, texLabel = NULL, clim = NULL) {
if (is.null(texLabel)) texLabel <- "$(\\Sigma_m)_{ij}$"
xMin <- min(Sigma)
xMax <- max(Sigma)
if (!is.null(clim)) {
xMin <- clim[1]
xMax <- clim[2]
}
melted_cov <- reshape2::melt(Sigma)
matPlot <- ggplot(data = melted_cov, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
labs(fill = latex2exp::TeX(texLabel)) +
scale_fill_gradient2(low = "#AA4499", mid = "white", high = "#117733",
oob = scales::squish,
limits = c(xMin, xMax)) +
theme_void() +
theme(panel.background = element_rect(colour = "gray", fill = "gray", linewidth = 0.5))
matPlot <- matPlot + theme(legend.position = "none") +
labs(title = latex2exp::TeX(texLabel)) +
theme(plot.title = element_text(size = 10,hjust = 0.5))
return(matPlot)
}
#'
#' @importFrom ggplot2 ggplot aes geom_line theme
#'
colorBar_strip <- function(clim = c(-1, 1), texLabel = NULL) {
if (is.null(texLabel)) texLabel <- "$\\Sigma$"
ncolors <- 512
z <- seq(clim[1], clim[2], length.out = ncolors)
df <- data.frame(x = z, y = 1, z = z)
blim = floor(clim[2] / 0.05) * 0.05
breaks <- round(seq(-blim, blim, length.out = 5),2)
stripPlot <- ggplot(df, aes(x, y, fill = z)) +
geom_raster() +
scale_fill_gradient2(limits = clim, low = "#AA4499", mid = "white", high = "#117733",
oob = scales::squish) +
scale_x_continuous(breaks = breaks) +
# coord_fixed(ratio = 1/15) +
theme_minimal(base_size = 12) +
theme(
axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank(),
axis.title.x = element_blank(),
panel.grid   = element_blank(),
legend.position = "none",
axis.text.x  = element_text(size = 9)
) +
labs(title = latex2exp::TeX(texLabel)) +
theme(plot.title = element_text(size = 10,hjust = 0.5))
return(stripPlot)
}
#'
#' @importFrom ggplot2 ggplot aes geom_line theme
#'
white_spacer <- function() {
white_plot <- ggplot() + theme_void() +
theme(panel.background = element_rect(fill = "white", colour = NA))
return(white_plot)
}
#' Plot posterior means of factor loadings
#'
#' @param risMCMC Posterior samples, output of \code{gibbs_jafar} or \code{gibbs_jfr}
#' @param out_path Output path where the generated plot will be saved
#' @param out_name_shared Output file name for the shared component plot (default: "n_factors_shared")
#' @param out_name_specific Output file name for the specific components plot (default: "n_factor_specific")
#'
#'
#' @importFrom ggplot2 ggplot aes geom_line theme cowplot
#'
#' @export
#'
plot_loadings <- function(risMCMC,out_path='~/Desktop/',
out_name_shared='shared_loadings',
out_name_specific='specific_loadings'){
is_supervised = ('Theta'%in%names(risMCMC))
is_jafar = grepl('jafar',risMCMC$hyper_param$model)
M <- length(risMCMC$mu_m)
p_m <- sapply(risMCMC$Lambda_m, ncol)
# Compute posterior means
L_mean_m <- lapply(risMCMC$Lambda_m, function(mat) apply(mat,c(2,3),mean))
if(is_jafar){G_mean_m <- lapply(risMCMC$Gamma_m, function(mat) apply(mat,c(2,3),mean))}
if(is_supervised){
T_mean = apply(risMCMC$Theta,2,mean)
if(is_jafar){T_mean_m <- lapply(risMCMC$Theta_m, function(mat) apply(mat,2,mean))}
}
# Get limits
K0 = ncol(L_mean_m[[1]])
if(is_jafar){K0_m = sapply(G_mean_m,ncol)}
lim_load = c(-1,1)*max(1,ceiling(100*max(abs(unlist(c(L_mean_m))))+1)/100)
if(is_supervised){lim_th = c(-1,1)*ceiling(100*max(abs(c(T_mean)))+1)/100}
if(is_jafar){
lim_load = c(-1,1)*max(1,ceiling(100*max(abs(unlist(c(L_mean_m,G_mean_m))))+1)/100)
if(is_supervised){lim_th = c(-1,1)*ceiling(100*max(abs(c(T_mean,unlist(T_mean_m))))+1)/100}
}
# Re-order columns
idx_shared = order(rowMeans(sapply(L_mean_m, function(mat) colMeans(mat^2))),decreasing = T)
idx_shared_m <- list()
for(m in 1:M){
L_mean_m[[m]] = L_mean_m[[m]][,idx_shared]
if(is_jafar){
idx_shared_m[[m]] <- order(colMeans(G_mean_m[[m]]^2),decreasing = T)
G_mean_m[[m]] = G_mean_m[[m]][,idx_shared_m[[m]]]
}
}
if(is_supervised){
T_mean = T_mean[idx_shared]
if(is_jafar){for(m in 1:M){T_mean_m[[m]] = T_mean_m[[m]][idx_shared_m[[m]]]}}
}
# plotting parameters
Nrow <- 2
rel_heights = c(12.5, 2)
tot_height = 5
tot_width = 2*M
if(is_supervised){
Nrow <- 3
rel_heights = c(2, 13, 2)
tot_height = 6
}
# plot shared component
pL <- lapply(1:M, function(m) visualizeMatrix(t(L_mean_m[[m]]),
texLabel = paste0("$\\Lambda_", m, "$"), clim = lim_load) +
theme(plot.margin = margin(3, 5, 3, 5)))
p0 <- replicate(M, white_spacer(), simplify = FALSE)
p0[[M]] <- gg_gradient_strip(clim = lim_load, texLabel = paste0("$\\Lambda_m$"))
all_plots <- c(pL,p0)
if(is_supervised){
p0[[1]] <- gg_gradient_strip(clim = lim_th, texLabel = paste0("$\\theta$"))
pT <- visualizeMatrix(matrix(T_mean,ncol=1),
texLabel = paste0("$\\theta$"), clim = lim_th) +
theme(plot.margin = margin(0, 5, 0, 5))
pT0 <- replicate(M, white_spacer(), simplify = FALSE)
pT0[[(M+1)%/%2]] <- pT
all_plots <- c(pT0,pL,p0)
}
combined_plots <- plot_grid(plotlist=all_plots,nrow=Nrow,ncol=M,align="hv",rel_heights=rel_heights)
ggsave(file.path(out_path, paste0(out_name_shared,".pdf")),
combined_plots, width = tot_width, height = tot_height)
# plot specific components
if(is_jafar){
pG <- lapply(1:M, function(m) visualizeMatrix(t(L_mean_m[[m]]),
texLabel = paste0("$\\Gamma_", m, "$"), clim = lim_load) +
theme(plot.margin = margin(3, 5, 3, 5)))
p0 <- replicate(M, white_spacer(), simplify = FALSE)
p0[[M]] <- gg_gradient_strip(clim = lim_load, texLabel = paste0("$\\Gamma_m$"))
all_plots <- c(pG,p0)
if(is_supervised){
p0[[1]] <- gg_gradient_strip(clim = lim_th, texLabel = paste0("$\\theta_m$"))
pT <- lapply(1:M, function(m) visualizeMatrix(matrix(T_mean_m[[m]],ncol=1),
texLabel = paste0("$\\theta_", m,"$"), clim = lim_th) +
theme(plot.margin = margin(0, 5, 0, 5)))
all_plots <- c(pT,pG,p0)
}
combined_plots <- plot_grid(plotlist=all_plots,nrow=Nrow,ncol=M,align="hv",rel_heights=rel_heights)
ggsave(file.path(out_path, paste0(out_name_specific,".pdf")),
combined_plots, width = tot_width, height = tot_height)
}
}
# prova -------
plot_loadings(mcmc_supervised)
#'
#' @importFrom ggplot2 ggplot aes geom_line theme cowplot
#'
visualizeMatrix <- function(Sigma, texLabel = NULL, clim = NULL) {
if (is.null(texLabel)) texLabel <- "$(\\Sigma_m)_{ij}$"
xMin <- min(Sigma)
xMax <- max(Sigma)
if (!is.null(clim)) {
xMin <- clim[1]
xMax <- clim[2]
}
melted_cov <- reshape2::melt(Sigma)
matPlot <- ggplot(data = melted_cov, aes(x = Var1, y = Var2, fill = value)) +
geom_tile() +
labs(fill = latex2exp::TeX(texLabel)) +
scale_fill_gradient2(low = "#AA4499", mid = "white", high = "#117733",
oob = scales::squish,
limits = c(xMin, xMax)) +
theme_void() +
theme(panel.background = element_rect(colour = "gray", fill = "gray", linewidth = 0.5))
matPlot <- matPlot + theme(legend.position = "none") +
labs(title = latex2exp::TeX(texLabel)) +
theme(plot.title = element_text(size = 10,hjust = 0.5))
return(matPlot)
}
#'
#' @importFrom ggplot2 ggplot aes geom_line theme
#'
colorBar_strip <- function(clim = c(-1, 1), texLabel = NULL) {
if (is.null(texLabel)) texLabel <- "$\\Sigma$"
ncolors <- 512
z <- seq(clim[1], clim[2], length.out = ncolors)
df <- data.frame(x = z, y = 1, z = z)
blim = floor(clim[2] / 0.05) * 0.05
breaks <- round(seq(-blim, blim, length.out = 5),2)
stripPlot <- ggplot(df, aes(x, y, fill = z)) +
geom_raster() +
scale_fill_gradient2(limits = clim, low = "#AA4499", mid = "white", high = "#117733",
oob = scales::squish) +
scale_x_continuous(breaks = breaks) +
# coord_fixed(ratio = 1/15) +
theme_minimal(base_size = 12) +
theme(
axis.title.y = element_blank(),
axis.text.y  = element_blank(),
axis.ticks.y = element_blank(),
axis.title.x = element_blank(),
panel.grid   = element_blank(),
legend.position = "none",
axis.text.x  = element_text(size = 9)
) +
labs(title = latex2exp::TeX(texLabel)) +
theme(plot.title = element_text(size = 10,hjust = 0.5))
return(stripPlot)
}
#'
#' @importFrom ggplot2 ggplot aes geom_line theme
#'
white_spacer <- function() {
white_plot <- ggplot() + theme_void() +
theme(panel.background = element_rect(fill = "white", colour = NA))
return(white_plot)
}
#' Plot posterior means of factor loadings
#'
#' @param risMCMC Posterior samples, output of \code{gibbs_jafar} or \code{gibbs_jfr}
#' @param out_path Output path where the generated plot will be saved
#' @param out_name_shared Output file name for the shared component plot (default: "n_factors_shared")
#' @param out_name_specific Output file name for the specific components plot (default: "n_factor_specific")
#'
#'
#' @importFrom ggplot2 ggplot aes geom_line theme cowplot
#'
#' @export
#'
plot_loadings <- function(risMCMC,out_path='~/Desktop/',
out_name_shared='shared_loadings',
out_name_specific='specific_loadings'){
is_supervised = ('Theta'%in%names(risMCMC))
is_jafar = grepl('jafar',risMCMC$hyper_param$model)
M <- length(risMCMC$mu_m)
p_m <- sapply(risMCMC$Lambda_m, ncol)
# Compute posterior means
L_mean_m <- lapply(risMCMC$Lambda_m, function(mat) apply(mat,c(2,3),mean))
if(is_jafar){G_mean_m <- lapply(risMCMC$Gamma_m, function(mat) apply(mat,c(2,3),mean))}
if(is_supervised){
T_mean = apply(risMCMC$Theta,2,mean)
if(is_jafar){T_mean_m <- lapply(risMCMC$Theta_m, function(mat) apply(mat,2,mean))}
}
# Get limits
K0 = ncol(L_mean_m[[1]])
if(is_jafar){K0_m = sapply(G_mean_m,ncol)}
lim_load = c(-1,1)*max(1,ceiling(100*max(abs(unlist(c(L_mean_m))))+1)/100)
if(is_supervised){lim_th = c(-1,1)*ceiling(100*max(abs(c(T_mean)))+1)/100}
if(is_jafar){
lim_load = c(-1,1)*max(1,ceiling(100*max(abs(unlist(c(L_mean_m,G_mean_m))))+1)/100)
if(is_supervised){lim_th = c(-1,1)*ceiling(100*max(abs(c(T_mean,unlist(T_mean_m))))+1)/100}
}
# Re-order columns
idx_shared = order(rowMeans(sapply(L_mean_m, function(mat) colMeans(mat^2))),decreasing = T)
idx_shared_m <- list()
for(m in 1:M){
L_mean_m[[m]] = L_mean_m[[m]][,idx_shared]
if(is_jafar){
idx_shared_m[[m]] <- order(colMeans(G_mean_m[[m]]^2),decreasing = T)
G_mean_m[[m]] = G_mean_m[[m]][,idx_shared_m[[m]]]
}
}
if(is_supervised){
T_mean = T_mean[idx_shared]
if(is_jafar){for(m in 1:M){T_mean_m[[m]] = T_mean_m[[m]][idx_shared_m[[m]]]}}
}
# plotting parameters
Nrow <- 2
rel_heights = c(12.5, 2)
tot_height = 5
tot_width = 2*M
if(is_supervised){
Nrow <- 3
rel_heights = c(2, 13, 2)
tot_height = 6
}
# plot shared component
pL <- lapply(1:M, function(m) visualizeMatrix(t(L_mean_m[[m]]),
texLabel = paste0("$\\Lambda_", m, "$"), clim = lim_load) +
theme(plot.margin = margin(3, 5, 3, 5)))
p0 <- replicate(M, white_spacer(), simplify = FALSE)
p0[[M]] <- gg_gradient_strip(clim = lim_load, texLabel = paste0("$\\Lambda_m$"))
all_plots <- c(pL,p0)
if(is_supervised){
p0[[1]] <- gg_gradient_strip(clim = lim_th, texLabel = paste0("$\\theta$"))
pT <- visualizeMatrix(matrix(T_mean,ncol=1),
texLabel = paste0("$\\theta$"), clim = lim_th) +
theme(plot.margin = margin(0, 5, 0, 5))
pT0 <- replicate(M, white_spacer(), simplify = FALSE)
pT0[[(M+1)%/%2]] <- pT
all_plots <- c(pT0,pL,p0)
}
combined_plots <- plot_grid(plotlist=all_plots,nrow=Nrow,ncol=M,align="hv",rel_heights=rel_heights)
ggsave(file.path(out_path, paste0(out_name_shared,".pdf")),
combined_plots, width = tot_width, height = tot_height)
# plot specific components
if(is_jafar){
pG <- lapply(1:M, function(m) visualizeMatrix(t(G_mean_m[[m]]),
texLabel = paste0("$\\Gamma_", m, "$"), clim = lim_load) +
theme(plot.margin = margin(3, 5, 3, 5)))
p0 <- replicate(M, white_spacer(), simplify = FALSE)
p0[[M]] <- gg_gradient_strip(clim = lim_load, texLabel = paste0("$\\Gamma_m$"))
all_plots <- c(pG,p0)
if(is_supervised){
p0[[1]] <- gg_gradient_strip(clim = lim_th, texLabel = paste0("$\\theta_m$"))
pT <- lapply(1:M, function(m) visualizeMatrix(matrix(T_mean_m[[m]],ncol=1),
texLabel = paste0("$\\theta_", m,"$"), clim = lim_th) +
theme(plot.margin = margin(0, 5, 0, 5)))
all_plots <- c(pT,pG,p0)
}
combined_plots <- plot_grid(plotlist=all_plots,nrow=Nrow,ncol=M,align="hv",rel_heights=rel_heights)
ggsave(file.path(out_path, paste0(out_name_specific,".pdf")),
combined_plots, width = tot_width, height = tot_height)
}
}
# prova -------
plot_loadings(mcmc_supervised)
devtools::document()
devtools::document()
devtools::document()
devtools::install()
rm(list = ls())
library(jafar)
library(rstudioapi)
library(knitr)
library(ggplot2)
output_dir = file.path(dirname(getSourceEditorContext()$path), 'results') # <- modify to save in a different location
dir.create(output_dir, showWarnings = FALSE)
# data("Data")   # loads the dataset
Data <- readRDS('~/Documents/GitHub/jafar_paper/data/Sec3_Simulations/Simulated_data_n200_s94.rds')
M <- length(Data$X_m)
p_m <- sapply(Data$X_m,ncol)
n <- nrow(Data$X_m[[1]])
nTest <- nrow(Data$X_m_test[[1]])
summary_df <- rbind(data.frame(Element="Train Samples", Dimension=n),
data.frame(Element="Test Samples", Dimension=nTest),
data.frame(Element=paste0("View ",1:M), Dimension=p_m))
knitr::kable(summary_df, caption="Dimensionality Summary")
preprocessed_X <- preprocess_X(Data$X_m,X_m_test=Data$X_m_test,copula=F)
devtools::clean_dll()
devtools::document()
devtools::clean_dll()
devtools::document()
devtools::install()
library(jafar)
devtools::spell_check()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install_github("niccoloanceschi/jafar")
devtools::document()
