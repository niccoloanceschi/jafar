plot_pred_jafar(y_train_pred,yTrain,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Train')
plot_pred_jafar(y_test_pred,yTest,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Test')
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_pred_jafar(y_train_pred,yTrain,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Train')
plot_pred_jafar(y_test_pred,yTest,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Test')
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_pred_jafar(y_train_pred,yTrain,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Train')
plot_pred_jafar(y_test_pred,yTest,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Test')
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_pred_jafar(y_train_pred,yTrain,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Train')
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_pred_jafar(y_train_pred,yTrain,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Train')
plot_pred_jafar(y_test_pred,yTest,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Test')
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_pred_jafar(y_train_pred,yTrain,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Train')
plot_pred_jafar(y_test_pred,yTest,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Test')
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_pred_jafar(y_train_pred,yTrain,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Train')
plot_pred_jafar(y_test_pred,yTest,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Test')
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_pred_jafar(y_train_pred,yTrain,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Train')
plot_pred_jafar(y_test_pred,yTest,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Test')
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_pred_jafar(y_train_pred,yTrain,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Train')
plot_pred_jafar(y_test_pred,yTest,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Test')
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_pred_jafar(y_train_pred,yTrain,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Train')
plot_pred_jafar(y_test_pred,yTest,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Test')
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_pred_jafar(y_train_pred,yTrain,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Train')
plot_pred_jafar(y_test_pred,yTest,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Test')
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_pred_jafar(y_train_pred,yTrain,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Train')
plot_pred_jafar(y_test_pred,yTest,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Test')
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_pred_jafar(y_train_pred,yTrain,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Train')
plot_pred_jafar(y_test_pred,yTest,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Test')
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_pred_jafar(y_train_pred,yTrain,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Train')
plot_pred_jafar(y_test_pred,yTest,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Test')
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_pred_jafar(y_train_pred,yTrain,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Train')
plot_pred_jafar(y_test_pred,yTest,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Test')
inferred_Coeff <- coeff_JAFAR(ris_MCMC)
dim(inferred_Coeff[[1]])
plot_coeff_jafar(inferred_Coeff,out_folder=output_dir)
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_coeff_jafar(inferred_Coeff,out_folder=output_dir)
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_coeff_jafar(inferred_Coeff,out_folder=output_dir)
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_coeff_jafar(inferred_Coeff,out_folder=output_dir)
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_coeff_jafar(inferred_Coeff,out_folder=output_dir)
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_coeff_jafar(inferred_Coeff,out_folder=output_dir)
rm(list = ls())
# source code
library(truncnorm)
library(Hmisc)
library(stats)
library(caret)
# plots
library(knitr)
library(rstudioapi)
library(ggplot2)
library(latex2exp)
library(reshape2)
library(scales)
library(fields)
# bsfp predictions
library(svMisc)
library(MASS)
# set working directory
working_dir = dirname(getSourceEditorContext()$path)
opts_knit$set(root.dir = working_dir)
# Import source code
# TODO: replace 'library(jafar)'
source_dir = paste0(dirname(dirname(getSourceEditorContext()$path)),'/R')
file_list = c('JAFAR_D-CUSP_gibbs_sampler.R','JAFAR_D-CUSP_initialization.R','JAFAR_D-CUSP_plots.R',
'JAFAR_D-CUSP_postprocessing.R','JAFAR_D-CUSP_predictions.R','JAFAR_D-CUSP_updates.R',
'JAFAR_D-CUSP_preprocessing.R')
for(source_file in file_list){
source(file.path(source_dir, source_file))
}
compiled_updates = F
if(compiled_updates){
source_dir = paste0(dirname(dirname(getSourceEditorContext()$path)),'/source')
Rcpp::sourceCpp(file.path(source_dir, 'JAFAR_D-CUSP_updates.cpp'))
}
# Import tutorial data
data_dir <- dirname(getSourceEditorContext()$path)
Data <- readRDS(file.path(data_dir,"tutorial_data.rds"))
M <- length(Data$X_m)
p_m <- sapply(Data$X_m,ncol)
n <- sapply(Data$X_m,nrow)[1]
nTest <- sapply(Data$X_m_test,nrow)[1]
# preprocess
copula = F
preprocessed_X <- jafar_preprocess_X(Data$X_m,Z_m_test=Data$X_m_test,copula=copula)
Z_m <- preprocessed_X$Z_m
Z_m_test <- preprocessed_X$Z_m_test
convert_y_binary = F
if(convert_y_binary){
cens_thr <- quantile(Data$yTrain,0.65)
Data$yTrain <- 1*(Data$yTrain > cens_thr)
Data$yTest  <- 1*(Data$yTest > cens_thr)
}
binary_y=as.logical(min(Data$yTrain%%1==0))
if(!binary_y){
preprocessed_y <- jafar_preprocess_y(Data$yTrain,yTest=Data$yTest)
yTrain <- preprocessed_y$yTrain
yTest <- preprocessed_y$yTest
} else {
yTrain <- Data$yTrain
yTest <- Data$yTest
}
# mcmc params
nMCMC = 1000
nBurnIn = 500
nThin = 10
mcmc_seed=123
Kmax = 30
Kmax_m = rep(20,M)
# Gibbs Sampler ----------------------------------------------------------------
print(' | Running Gibbs Sampler')
ris_MCMC <- gibbs_JAFAR_CUSP(yTrain, Z_m, n, M, p_m,
nBurnIn, nMCMC, nThin, seed = mcmc_seed,
Kmax=Kmax, Kmax_m=Kmax_m,binary_y=binary_y)
print(' | Computing predicitions ')
source(file.path(source_dir, 'JAFAR_D-CUSP_predictions.R'))
y_train_pred <- y_pred_JAFAR(Z_m,ris_MCMC)
y_test_pred <- y_pred_JAFAR(Z_m_test,ris_MCMC)
output_dir = dirname(getSourceEditorContext()$path)
dir.create(file.path(output_dir, 'results'), showWarnings = FALSE)
output_dir = file.path(output_dir, 'results')
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_n_fact_shared(ris_MCMC,out_folder=output_dir)
plot_n_fact_specific(ris_MCMC,out_folder=output_dir)
plot_cor_jafar(ris_MCMC,Z_m, out_folder=output_dir)
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_pred_jafar(y_train_pred,yTrain,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Train')
plot_pred_jafar(y_test_pred,yTest,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Test')
inferred_Coeff <- coeff_JAFAR(ris_MCMC)
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_coeff_jafar(inferred_Coeff,out_folder=output_dir)
rotated_variables <- postprocess_JAFAR(ris_MCMC)
# source code
library(truncnorm)
library(Hmisc)
library(stats)
library(caret)
# postprocessing
library(infinitefactor)
# plots
library(knitr)
library(rstudioapi)
library(ggplot2)
library(latex2exp)
library(reshape2)
library(scales)
library(fields)
# bsfp predictions
library(svMisc)
library(MASS)
rotated_variables <- postprocess_JAFAR(ris_MCMC)
plot_loadings_jafar(rotated_variables,out_folder=output_dir)
m=1; TeX(paste0('$\\Lambda_{',m,'}$'))
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_loadings_jafar(rotated_variables,out_folder=output_dir)
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_loadings_jafar(rotated_variables,out_folder=output_dir)
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_loadings_jafar(rotated_variables,out_folder=output_dir)
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_loadings_jafar(rotated_variables,out_folder=output_dir)
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_loadings_jafar(rotated_variables,out_folder=output_dir)
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_loadings_jafar(rotated_variables,out_folder=output_dir)
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_loadings_jafar(rotated_variables,out_folder=output_dir)
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_loadings_jafar(rotated_variables,out_folder=output_dir)
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_loadings_jafar(rotated_variables,out_folder=output_dir)
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_loadings_jafar(rotated_variables,out_folder=output_dir)
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_loadings_jafar(rotated_variables,out_folder=output_dir)
source(file.path(source_dir, 'JAFAR_D-CUSP_plots.R'))
plot_loadings_jafar(rotated_variables,out_folder=output_dir)
rm(list = ls())
# source code
library(truncnorm)
library(Hmisc)
library(stats)
library(caret)
# postprocessing
library(infinitefactor)
# plots
library(knitr)
library(rstudioapi)
library(ggplot2)
library(latex2exp)
library(reshape2)
library(scales)
library(fields)
# bsfp predictions
library(svMisc)
library(MASS)
# set working directory
working_dir = dirname(getSourceEditorContext()$path)
opts_knit$set(root.dir = working_dir)
# Import source code
# TODO: replace 'library(jafar)'
source_dir = paste0(dirname(dirname(getSourceEditorContext()$path)),'/R')
file_list = c('JAFAR_D-CUSP_gibbs_sampler.R','JAFAR_D-CUSP_initialization.R','JAFAR_D-CUSP_plots.R',
'JAFAR_D-CUSP_postprocessing.R','JAFAR_D-CUSP_predictions.R','JAFAR_D-CUSP_updates.R',
'JAFAR_D-CUSP_preprocessing.R')
for(source_file in file_list){
source(file.path(source_dir, source_file))
}
compiled_updates = F
if(compiled_updates){
source_dir = paste0(dirname(dirname(getSourceEditorContext()$path)),'/source')
Rcpp::sourceCpp(file.path(source_dir, 'JAFAR_D-CUSP_updates.cpp'))
}
# Import tutorial data
data_dir <- dirname(getSourceEditorContext()$path)
Data <- readRDS(file.path(data_dir,"tutorial_data.rds"))
M <- length(Data$X_m)
p_m <- sapply(Data$X_m,ncol)
n <- sapply(Data$X_m,nrow)[1]
nTest <- sapply(Data$X_m_test,nrow)[1]
# preprocess
copula = F
preprocessed_X <- jafar_preprocess_X(Data$X_m,Z_m_test=Data$X_m_test,copula=copula)
Z_m <- preprocessed_X$Z_m
Z_m_test <- preprocessed_X$Z_m_test
convert_y_binary = F
if(convert_y_binary){
cens_thr <- quantile(Data$yTrain,0.65)
Data$yTrain <- 1*(Data$yTrain > cens_thr)
Data$yTest  <- 1*(Data$yTest > cens_thr)
}
binary_y=as.logical(min(Data$yTrain%%1==0))
if(!binary_y){
preprocessed_y <- jafar_preprocess_y(Data$yTrain,yTest=Data$yTest)
yTrain <- preprocessed_y$yTrain
yTest <- preprocessed_y$yTest
} else {
yTrain <- Data$yTrain
yTest <- Data$yTest
}
# mcmc params
nMCMC = 1000
nBurnIn = 500
nThin = 10
mcmc_seed=123
Kmax = 30
Kmax_m = rep(20,M)
ris_MCMC <- gibbs_JAFAR_CUSP(yTrain, Z_m, n, M, p_m,
nBurnIn, nMCMC, nThin, seed = mcmc_seed,
Kmax=Kmax, Kmax_m=Kmax_m,binary_y=binary_y)
y_train_pred <- y_pred_JAFAR(Z_m,ris_MCMC)
y_test_pred <- y_pred_JAFAR(Z_m_test,ris_MCMC)
inferred_Coeff <- coeff_JAFAR(ris_MCMC)
rotated_variables <- postprocess_JAFAR(ris_MCMC)
output_dir = dirname(getSourceEditorContext()$path)
dir.create(file.path(output_dir, 'results'), showWarnings = FALSE)
output_dir = file.path(output_dir, 'results')
plot_n_fact_shared(ris_MCMC,out_folder=output_dir)
plot_n_fact_specific(ris_MCMC,out_folder=output_dir)
plot_cor_jafar(ris_MCMC,Z_m, out_folder=output_dir)
plot_pred_jafar(y_train_pred,yTrain,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Train')
plot_pred_jafar(y_test_pred,yTest,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Test')
plot_coeff_jafar(inferred_Coeff,out_folder=output_dir)
plot_loadings_jafar(rotated_variables,out_folder=output_dir)
rm(list = ls())
# source code
library(truncnorm)
library(Hmisc)
library(stats)
library(caret)
# postprocessing
library(infinitefactor)
# plots
library(knitr)
library(rstudioapi)
library(ggplot2)
library(latex2exp)
library(reshape2)
library(scales)
library(fields)
# bsfp predictions
library(svMisc)
library(MASS)
# set working directory
working_dir = dirname(getSourceEditorContext()$path)
opts_knit$set(root.dir = working_dir)
# Import source code
# TODO: replace 'library(jafar)'
source_dir = paste0(dirname(dirname(getSourceEditorContext()$path)),'/R')
file_list = c('JAFAR_D-CUSP_gibbs_sampler.R','JAFAR_D-CUSP_initialization.R','JAFAR_D-CUSP_plots.R',
'JAFAR_D-CUSP_postprocessing.R','JAFAR_D-CUSP_predictions.R','JAFAR_D-CUSP_updates.R',
'JAFAR_D-CUSP_preprocessing.R')
for(source_file in file_list){
source(file.path(source_dir, source_file))
}
compiled_updates = F
if(compiled_updates){
source_dir = paste0(dirname(dirname(getSourceEditorContext()$path)),'/source')
Rcpp::sourceCpp(file.path(source_dir, 'JAFAR_D-CUSP_updates.cpp'))
}
# Import tutorial data
data_dir <- dirname(getSourceEditorContext()$path)
Data <- readRDS(file.path(data_dir,"tutorial_data.rds"))
M <- length(Data$X_m)
p_m <- sapply(Data$X_m,ncol)
n <- sapply(Data$X_m,nrow)[1]
nTest <- sapply(Data$X_m_test,nrow)[1]
# preprocess
copula = F
preprocessed_X <- jafar_preprocess_X(Data$X_m,Z_m_test=Data$X_m_test,copula=copula)
Z_m <- preprocessed_X$Z_m
Z_m_test <- preprocessed_X$Z_m_test
convert_y_binary = T
if(convert_y_binary){
cens_thr <- quantile(Data$yTrain,0.65)
Data$yTrain <- 1*(Data$yTrain > cens_thr)
Data$yTest  <- 1*(Data$yTest > cens_thr)
}
binary_y=as.logical(min(Data$yTrain%%1==0))
if(!binary_y){
preprocessed_y <- jafar_preprocess_y(Data$yTrain,yTest=Data$yTest)
yTrain <- preprocessed_y$yTrain
yTest <- preprocessed_y$yTest
} else {
yTrain <- Data$yTrain
yTest <- Data$yTest
}
# mcmc params
nMCMC = 1000
nBurnIn = 500
nThin = 10
mcmc_seed=123
Kmax = 30
Kmax_m = rep(20,M)
ris_MCMC <- gibbs_JAFAR_CUSP(yTrain, Z_m, n, M, p_m,
nBurnIn, nMCMC, nThin, seed = mcmc_seed,
Kmax=Kmax, Kmax_m=Kmax_m,binary_y=binary_y)
y_train_pred <- y_pred_JAFAR(Z_m,ris_MCMC)
y_test_pred <- y_pred_JAFAR(Z_m_test,ris_MCMC)
inferred_Coeff <- coeff_JAFAR(ris_MCMC)
rotated_variables <- postprocess_JAFAR(ris_MCMC)
output_dir = dirname(getSourceEditorContext()$path)
dir.create(file.path(output_dir, 'results'), showWarnings = FALSE)
output_dir = file.path(output_dir, 'results')
plot_n_fact_shared(ris_MCMC,out_folder=output_dir)
plot_n_fact_specific(ris_MCMC,out_folder=output_dir)
plot_cor_jafar(ris_MCMC,Z_m, out_folder=output_dir)
plot_pred_jafar(y_train_pred,yTrain,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Train')
plot_pred_jafar(y_test_pred,yTest,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Test')
plot_coeff_jafar(inferred_Coeff,out_folder=output_dir)
plot_loadings_jafar(rotated_variables,out_folder=output_dir)
rm(list = ls())
# source code
library(truncnorm)
library(Hmisc)
library(stats)
library(caret)
# postprocessing
library(infinitefactor)
# plots
library(knitr)
library(rstudioapi)
library(ggplot2)
library(latex2exp)
library(reshape2)
library(scales)
library(fields)
# bsfp predictions
library(svMisc)
library(MASS)
# set working directory
working_dir = dirname(getSourceEditorContext()$path)
opts_knit$set(root.dir = working_dir)
# Import source code
# TODO: replace 'library(jafar)'
source_dir = paste0(dirname(dirname(getSourceEditorContext()$path)),'/R')
file_list = c('JAFAR_D-CUSP_gibbs_sampler.R','JAFAR_D-CUSP_initialization.R','JAFAR_D-CUSP_plots.R',
'JAFAR_D-CUSP_postprocessing.R','JAFAR_D-CUSP_predictions.R','JAFAR_D-CUSP_updates.R',
'JAFAR_D-CUSP_preprocessing.R')
for(source_file in file_list){
source(file.path(source_dir, source_file))
}
compiled_updates = T
if(compiled_updates){
source_dir = paste0(dirname(dirname(getSourceEditorContext()$path)),'/source')
Rcpp::sourceCpp(file.path(source_dir, 'JAFAR_D-CUSP_updates.cpp'))
}
# Import tutorial data
data_dir <- dirname(getSourceEditorContext()$path)
Data <- readRDS(file.path(data_dir,"tutorial_data.rds"))
M <- length(Data$X_m)
p_m <- sapply(Data$X_m,ncol)
n <- sapply(Data$X_m,nrow)[1]
nTest <- sapply(Data$X_m_test,nrow)[1]
# preprocess
copula = F
preprocessed_X <- jafar_preprocess_X(Data$X_m,Z_m_test=Data$X_m_test,copula=copula)
Z_m <- preprocessed_X$Z_m
Z_m_test <- preprocessed_X$Z_m_test
convert_y_binary = T
if(convert_y_binary){
cens_thr <- quantile(Data$yTrain,0.65)
Data$yTrain <- 1*(Data$yTrain > cens_thr)
Data$yTest  <- 1*(Data$yTest > cens_thr)
}
binary_y=as.logical(min(Data$yTrain%%1==0))
if(!binary_y){
preprocessed_y <- jafar_preprocess_y(Data$yTrain,yTest=Data$yTest)
yTrain <- preprocessed_y$yTrain
yTest <- preprocessed_y$yTest
} else {
yTrain <- Data$yTrain
yTest <- Data$yTest
}
# mcmc params
nMCMC = 1000
nBurnIn = 500
nThin = 10
mcmc_seed=123
Kmax = 30
Kmax_m = rep(20,M)
ris_MCMC <- gibbs_JAFAR_CUSP(yTrain, Z_m, n, M, p_m,
nBurnIn, nMCMC, nThin, seed = mcmc_seed,
Kmax=Kmax, Kmax_m=Kmax_m,binary_y=binary_y)
y_train_pred <- y_pred_JAFAR(Z_m,ris_MCMC)
y_test_pred <- y_pred_JAFAR(Z_m_test,ris_MCMC)
inferred_Coeff <- coeff_JAFAR(ris_MCMC)
rotated_variables <- postprocess_JAFAR(ris_MCMC)
output_dir = dirname(getSourceEditorContext()$path)
dir.create(file.path(output_dir, 'results'), showWarnings = FALSE)
output_dir = file.path(output_dir, 'results')
plot_n_fact_shared(ris_MCMC,out_folder=output_dir)
plot_n_fact_specific(ris_MCMC,out_folder=output_dir)
plot_cor_jafar(ris_MCMC,Z_m, out_folder=output_dir)
plot_pred_jafar(y_train_pred,yTrain,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Train')
plot_pred_jafar(y_test_pred,yTest,s2y_inv=ris_MCMC$s2_inv,is_binary=binary_y,out_folder=output_dir,title='Test')
plot_coeff_jafar(inferred_Coeff,out_folder=output_dir)
plot_loadings_jafar(rotated_variables,out_folder=output_dir)
library(roxygen2)
library(devtools)
get_coeff_JAFAR <- function(M,K,K_m,p_m,Theta,s2_inv_y,Lambda_m,Gamma_m,s2_inv_m,rescale_pred=FALSE){
beta_m <- list()
C_inv <- diag(1,K,K)
for(m in 1:M){
mar_std_m = rep(1,p_m[m])
if(rescale_pred){
mar_std_m = sqrt(1/s2_inv_m[[m]] + rowSums(Lambda_m[[m]]^2) + rowSums(Gamma_m[[m]]^2))
}
Ga_m = Gamma_m[[m]]/mar_std_m
s2_m = s2_inv_m[[m]]*(mar_std_m^2)
La_m = Lambda_m[[m]]/mar_std_m
s2_Ga_m = s2_m*Ga_m
GaT_s2_La_m = crossprod(s2_Ga_m,La_m)
D_m_inv = chol(diag(1.,K_m[m],K_m[m])+crossprod(Ga_m,s2_Ga_m))
D_GaT_s2_La_m = backsolve(D_m_inv,forwardsolve(t(D_m_inv),GaT_s2_La_m))
C_inv = C_inv + crossprod(La_m,s2_m*La_m) - crossprod(GaT_s2_La_m,D_GaT_s2_La_m)
beta_m[[m]] = t(s2_m*La_m - s2_Ga_m%*%D_GaT_s2_La_m)
}
C_chol = chol(C_inv)
Theta_C = backsolve(C_chol,forwardsolve(t(C_chol),Theta))
var_y = 1/s2_inv_y + sum(Theta*Theta_C)
for(m in 1:M){beta_m[[m]] <- Theta_C%*%beta_m[[m]]}
return(list(pred_coeff_m=beta_m, pred_var=var_y))
}
@param Theta Response loadings s2_inv_ycoeff_JAFAR <- function(risMCMC,rescale_pred=FALSE){
#' @param range Jitter's range
#' @param vPred Predicted values
#' @param range Jitter's range
#' @param vPred Predicted values
#' @param range Jitter's range
#' @param vPred Predicted values
#' @param range Jitter's range
#'
#' @param out_folder Directory where to save output
#'
unif_jitter <- function(vPred,range=0.25){
n  = length(vPred)
n1 = sum(vPred)
n0 = n-n1
delta_0 = 2*range/max(n0,n1)
y_jitter <- vPred
y_jitter[vPred==0] <- seq(-delta_0*floor(n0/2-0.5),delta_0*floor(n0/2),by=delta_0)
y_jitter[vPred==1] <- 1+seq(-delta_0*floor(n1/2),delta_0*floor(n1/2-0.5),by=delta_0)
y_jitter
}
setwd('~/Documents/GitHub/jafar/')
roxygen2::document()
library("devtools")
library(roxygen2)
document()
create(jafar)
getwd()
create('jafar')
setwd('~/Documents/GitHub/')
create('jafar')
setwd('~/Documents/GitHub/jafar/')
document()
